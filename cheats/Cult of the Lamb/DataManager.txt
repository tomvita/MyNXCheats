public class DataManager // TypeDefIndex: 497
{
	// Fields
	[XmlIgnore]
	public MetaData MetaData; // 0x10
	public bool AllowSaving; // 0x50
	public bool PauseGameTime; // 0x51
	public bool GameOverEnabled; // 0x52
	public bool DisplayGameOverWarning; // 0x53
	public bool InGameOver; // 0x54
	public bool GameOver; // 0x55
	public bool DifficultyChosen; // 0x56
	public bool DifficultyReminded; // 0x57
	public int playerDeaths; // 0x58
	public int playerDeathsInARow; // 0x5C
	public int playerDeathsInARowFightingLeader; // 0x60
	public int FightPitRituals; // 0x64
	public int dungeonRun; // 0x68
	public float dungeonRunDuration; // 0x6C
	public List<NodeType> dungeonVisitedRooms; // 0x70
	public List<FollowerLocation> dungeonLocationsVisited; // 0x78
	public List<int> FollowersRecruitedInNodes; // 0x80
	public int FollowersRecruitedThisNode; // 0x88
	public float TimeInGame; // 0x8C
	public int KillsInGame; // 0x90
	public int dungeonRunXPOrbs; // 0x94
	public int ChestRewardCount; // 0x98
	public bool BaseGoopDoorLocked; // 0x9C
	public string BaseGoopDoorLoc; // 0xA0
	public int STATS_FollowersStarvedToDeath; // 0xA8
	public int STATS_Murders; // 0xAC
	public int STATS_Sacrifices; // 0xB0
	public int STATS_NaturalDeaths; // 0xB4
	public int PlayerKillsOnRun; // 0xB8
	public int PlayerStartingBlackSouls; // 0xBC
	public bool GivenFollowerHearts; // 0xC0
	public bool EnabledSpells; // 0xC1
	public bool ForceDoctrineStones; // 0xC2
	public int SpaceOutDoctrineStones; // 0xC4
	public int DoctrineStoneTotalCount; // 0xC8
	public bool BuildShrineEnabled; // 0xCC
	public bool EnabledHealing; // 0xCD
	public bool EnabledSword; // 0xCE
	public bool BonesEnabled; // 0xCF
	public bool XPEnabled; // 0xD0
	public bool ShownDodgeTutorial; // 0xD1
	public bool ShownInventoryTutorial; // 0xD2
	public int ShownDodgeTutorialCount; // 0xD4
	public bool HadInitialDeathCatConversation; // 0xD8
	public bool PlayerHasBeenGivenHearts; // 0xD9
	public int TotalFirefliesCaught; // 0xDC
	public int TotalSquirrelsCaught; // 0xE0
	public int TotalBirdsCaught; // 0xE4
	public int TotalBodiesHarvested; // 0xE8
	public DataManager.OnboardingPhase CurrentOnboardingPhase; // 0xEC
	public bool firstRecruit; // 0xF0
	public int MissionariesCompleted; // 0xF4
	public int PlayerFleece; // 0xF8
	public List<int> UnlockedFleeces; // 0x100
	public bool PostGameFleecesOnboarded; // 0x108
	public List<ThoughtData> Thoughts; // 0x110
	public bool CanReadMinds; // 0x118
	public bool HappinessEnabled; // 0x119
	public bool TeachingsEnabled; // 0x11A
	public bool SchedulingEnabled; // 0x11B
	public bool PrayerEnabled; // 0x11C
	public bool PrayerOrdered; // 0x11D
	public bool HasBuiltCookingFire; // 0x11E
	public bool HasBuiltFarmPlot; // 0x11F
	public bool HasBuiltTemple1; // 0x120
	public bool HasBuiltTemple2; // 0x121
	public bool HasBuiltTemple3; // 0x122
	public bool HasBuiltTemple4; // 0x123
	public bool HasBuiltShrine1; // 0x124
	public bool HasBuiltShrine2; // 0x125
	public bool HasBuiltShrine3; // 0x126
	public bool HasBuiltShrine4; // 0x127
	public bool HasBuiltPleasureShrine; // 0x128
	public bool HasOnboardedCultLevel; // 0x129
	public bool PerformedMushroomRitual; // 0x12A
	public bool BuiltMushroomDecoration; // 0x12B
	public bool HasBuiltSurveillance; // 0x12C
	public int TempleDevotionBoxCoinCount; // 0x130
	public bool CanBuildShrine; // 0x134
	public bool TriedTailorRequiresRevealingFromBase; // 0x135
	public bool TailorRequiresRevealingFromBase; // 0x136
	public int NudeClothingCount; // 0x138
	public bool SinSermonEnabled; // 0x13C
	public bool PleasureRevealed; // 0x13D
	public bool PleasureDoctrineOnboarded; // 0x13E
	public bool PleasureDoctrineEnabled; // 0x13F
	public int WokeUpEveryoneDay; // 0x140
	public bool DiedLastRun; // 0x144
	public UIDeathScreenOverlayController.Results LastRunResults; // 0x148
	public float LastFollowerToStarveToDeath; // 0x14C
	public float LastFollowerToFreezeToDeath; // 0x150
	public float LastFollowerToOverheatToDeath; // 0x154
	public float LastFollowerToBurnToDeath; // 0x158
	public float LastFollowerToStartStarving; // 0x15C
	public float LastFollowerToStartDissenting; // 0x160
	public float LastFollowerToStartFreezing; // 0x164
	public float LastFollowerToStartSoaking; // 0x168
	public float LastFollowerToStartOverheating; // 0x16C
	public float LastFollowerToReachOldAge; // 0x170
	public float LastFollowerToBecomeIll; // 0x174
	public float LastFollowerToBecomeIllFromSleepingNearIllFollower; // 0x178
	public float LastFollowerToPassOut; // 0x17C
	public int LastFollowerPurchasedFromSpider; // 0x180
	public float TimeSinceFaithHitEmpty; // 0x184
	public float TimeSinceLastCrisisOfFaithQuest; // 0x188
	public int JudgementAmount; // 0x18C
	public float HungerBarCount; // 0x190
	public float IllnessBarCount; // 0x194
	public float IllnessBarDynamicMax; // 0x198
	public float StaticFaith; // 0x19C
	public float CultFaith; // 0x1A0
	public float LastBrainwashed; // 0x1A4
	public float LastHolidayDeclared; // 0x1A8
	public float LastPurgeDeclared; // 0x1AC
	public float LastNudismDeclared; // 0x1B0
	public float LastWorkThroughTheNight; // 0x1B4
	public float LastConstruction; // 0x1B8
	public float LastEnlightenment; // 0x1BC
	public float LastFastDeclared; // 0x1C0
	public float LastFeastDeclared; // 0x1C4
	public float LastFishingDeclared; // 0x1C8
	public float LastHalloween; // 0x1CC
	public float LastCNY; // 0x1D0
	public float LastArcherShot; // 0x1D4
	public float LastSimpleGuardianAttacked; // 0x1D8
	public float LastSimpleGuardianRingProjectiles; // 0x1DC
	public int LastDayTreesAtBase; // 0x1E0
	public int LastSnowPileAtBase; // 0x1E4
	public int PreviousSermonDayIndex; // 0x1E8
	public const int SIN_SERMON_COST = 3;
	public int PreviousSinSermonDayIndex; // 0x1EC
	public SermonCategory PreviousSermonCategory; // 0x1F0
	public int ShrineLevel; // 0x1F4
	public int TempleLevel; // 0x1F8
	public int TempleBorder; // 0x1FC
	public bool GivenSermonQuest; // 0x200
	public bool GivenFaithOfFlockQuest; // 0x201
	public bool PrayedAtMassiveMonsterShrine; // 0x202
	public string TwitchSecretKey; // 0x208
	public string ChannelID; // 0x210
	public string ChannelName; // 0x218
	public bool TwitchSentFollowers; // 0x220
	public int TwitchTotemsCompleted; // 0x224
	public float TwitchNextHHEvent; // 0x228
	public List<string> TwitchFollowerViewerIDs; // 0x230
	public List<string> TwitchFollowerIDs; // 0x238
	public bool OnboardingFinished; // 0x240
	public string SaveUniqueID; // 0x248
	public List<string> enemiesEncountered; // 0x250
	public bool Chain1; // 0x258
	public bool Chain2; // 0x259
	public bool Chain3; // 0x25A
	public int DoorRoomChainProgress; // 0x25C
	public int DoorRoomDoorsProgress; // 0x260
	public int Dungeon1_Layer; // 0x264
	public int Dungeon2_Layer; // 0x268
	public int Dungeon3_Layer; // 0x26C
	public int Dungeon4_Layer; // 0x270
	public bool First_Dungeon_Resurrecting; // 0x274
	public bool PermadeDeathActive; // 0x275
	public int SpidersCaught; // 0x278
	public bool PhotoCameraLookedAtGallery; // 0x27C
	public bool PhotoUsedCamera; // 0x27D
	public List<FollowerClothingType> clothesCrafted; // 0x280
	public List<MiniBossController.MiniBossData> MiniBossData; // 0x288
	public List<DataManager.LocationAndLayer> CachePreviousRun; // 0x290
	public List<FollowerLocation> DiscoveredLocations; // 0x298
	public List<FollowerLocation> VisitedLocations; // 0x2A0
	public List<FollowerLocation> NewLocationFaithReward; // 0x2A8
	public List<FollowerLocation> DissentingFolllowerRooms; // 0x2B0
	[XmlIgnore]
	public FollowerLocation CurrentLocation; // 0x2B8
	public List<DataManager.LocationAndLayer> OpenedDungeonDoors; // 0x2C0
	public List<string> KeyPiecesFromLocation; // 0x2C8
	public List<FollowerLocation> UsedFollowerDispensers; // 0x2D0
	public List<FollowerLocation> UnlockedBossTempleDoor; // 0x2D8
	public List<FollowerLocation> UnlockedDungeonDoor; // 0x2E0
	public List<FollowerLocation> BossesCompleted; // 0x2E8
	public List<FollowerLocation> BossesEncountered; // 0x2F0
	public List<FollowerLocation> DoorRoomBossLocksDestroyed; // 0x2F8
	public List<FollowerLocation> SignPostsRead; // 0x300
	public bool ShrineDoor; // 0x308
	public bool BaseDoorEast; // 0x309
	public bool BaseDoorNorthEast; // 0x30A
	public bool BaseDoorNorthWest; // 0x30B
	public bool BossForest; // 0x30C
	public bool ForestTempleDoor; // 0x30D
	public List<int> CompletedQuestFollowerIDs; // 0x310
	public DataManager.CultLevel CurrentCultLevel; // 0x318
	public List<UnlockManager.UnlockType> MechanicsUnlocked; // 0x320
	public List<SermonsAndRituals.SermonRitualType> UnlockedSermonsAndRituals; // 0x328
	public List<StructureBrain.TYPES> UnlockedStructures; // 0x330
	public List<StructureBrain.TYPES> HistoryOfStructures; // 0x338
	public Dictionary<StructureBrain.TYPES, int> DayPreviosulyUsedStructures; // 0x340
	public bool NewBuildings; // 0x348
	public List<TutorialTopic> RevealedTutorialTopics; // 0x350
	public List<StructuresData.ResearchObject> CurrentResearch; // 0x358
	public UpgradeTreeNode.TreeTier CurrentUpgradeTreeTier; // 0x360
	public UpgradeTreeNode.TreeTier CurrentPlayerUpgradeTreeTier; // 0x364
	public UpgradeSystem.Type MostRecentTreeUpgrade; // 0x368
	public UpgradeSystem.Type MostRecentPlayerTreeUpgrade; // 0x36C
	public List<UpgradeSystem.Type> UnlockedUpgrades; // 0x370
	public List<DoctrineUpgradeSystem.DoctrineType> DoctrineUnlockedUpgrades; // 0x378
	public List<UpgradeSystem.UpgradeCoolDown> UpgradeCoolDowns; // 0x380
	public List<FollowerTrait.TraitType> CultTraits; // 0x388
	public List<string> WeaponUnlockedUpgrades; // 0x390
	public string CultName; // 0x398
	public string MysticKeeperName; // 0x3A0
	public int PlayerTriedToEnterMysticDimensionCount; // 0x3A8
	[XmlIgnore]
	public static string[] MysticShopKeeperSkins; // 0x0
	[XmlIgnore]
	public static StructureBrain.TYPES[] MysticShopKeeperDecorations; // 0x8
	public int MysticRewardCount; // 0x3AC
	public bool DungeonBossFight; // 0x3B0
	public List<DataManager.LocationSeedsData> LocationSeeds; // 0x3B8
	public WeatherSystemController.WeatherType WeatherType; // 0x3C0
	public WeatherSystemController.WeatherStrength WeatherStrength; // 0x3C4
	public float WeatherStartingTime; // 0x3C8
	public int WeatherDuration; // 0x3CC
	public float TempleStudyXP; // 0x3D0
	public int UnlockededASermon; // 0x3D4
	public int CurrentDayIndex; // 0x3D8
	public int CurrentPhaseIndex; // 0x3DC
	public float CurrentGameTime; // 0x3E0
	public int[] LastUsedSermonRitualDayIndex; // 0x3E8
	public int[] ScheduledActivityIndexes; // 0x3F0
	public int OverrideScheduledActivity; // 0x3F8
	public int[] InstantActivityIndexes; // 0x400
	public bool PlayerEaten; // 0x408
	public ResurrectionType ResurrectionType; // 0x40C
	public bool FirstTimeResurrecting; // 0x410
	public bool FirstTimeFertilizing; // 0x411
	public bool FirstTimeChop; // 0x412
	public bool FirstTimeMine; // 0x413
	public List<DataManager.DungeonCompletedFleeces> DungeonsCompletedWithFleeces; // 0x418
	public StructureBrain.Categories currentCategory; // 0x420
	public float TimeSinceLastComplaint; // 0x424
	public float TimeSinceLastQuest; // 0x428
	public int DessentingFollowerChoiceQuestionIndex; // 0x42C
	public int HaroConversationIndex; // 0x430
	public int SpecialHaroConversationIndex; // 0x434
	public List<FollowerLocation> HaroSpecialEncounteredLocations; // 0x438
	public List<FollowerLocation> LeaderSpecialEncounteredLocations; // 0x440
	public bool HaroConversationCompleted; // 0x448
	public bool RatauKilled; // 0x449
	public bool RatauReadLetter; // 0x44A
	public FollowerLocation CurrentFoxLocation; // 0x44C
	public int CurrentFoxEncounter; // 0x450
	public List<FollowerLocation> FoxIntroductions; // 0x458
	public List<FollowerLocation> FoxCompleted; // 0x460
	public int PlimboStoryProgress; // 0x468
	public int RatooFishingProgress; // 0x46C
	public bool RatooFishing_FISH_CRAB; // 0x470
	public bool RatooFishing_FISH_LOBSTER; // 0x471
	public bool RatooFishing_FISH_OCTOPUS; // 0x472
	public bool RatooFishing_FISH_SQUID; // 0x473
	public bool PlayerHasFollowers; // 0x474
	public bool ShowSpecialHaroRoom; // 0x475
	public bool ShowSpecialMidasRoom; // 0x476
	public bool ShowSpecialPlimboRoom; // 0x477
	public bool ShowSpecialKlunkoRoom; // 0x478
	public bool ShowSpecialLeaderRoom; // 0x479
	public bool ShowSpecialFishermanRoom; // 0x47A
	public bool ShowSpecialSozoRoom; // 0x47B
	public bool ShowSpecialBaalAndAymRoom; // 0x47C
	public bool ShowSpecialLighthouseKeeperRoom; // 0x47D
	public bool SozoUnlockedMushroomSkin; // 0x47E
	public bool SozoNoLongerBrainwashed; // 0x47F
	public int SozoMushroomRecruitedDay; // 0x480
	public int SozoAteMushroomDay; // 0x484
	public int SozoMushroomCount; // 0x488
	public int DrunkDay; // 0x48C
	public int DrunkIncrement; // 0x490
	public int FishCaughtTotal; // 0x494
	public int PlayerDeathDay; // 0x498
	public int DisciplesCreated; // 0x49C
	public float LastDrumCircleTime; // 0x4A0
	public bool RatooGivenHeart; // 0x4A4
	public bool RatooMentionedWrongHeart; // 0x4A5
	public bool ShownInitialTempleDoorSeal; // 0x4A6
	public bool FirstFollowerSpawnInteraction; // 0x4A7
	public List<int> DecorationTypesBuilt; // 0x4A8
	public List<FollowerClothingType> UnlockedClothing; // 0x4B0
	public List<FollowerClothingType> ClothingAssigned; // 0x4B8
	public FollowerClothingType previouslyAssignedClothing; // 0x4C0
	public List<DataManager.ClothingVariant> ClothingVariants; // 0x4C8
	public List<TarotCards.Card> WeaponSelectionPositions; // 0x4D0
	public int LoreStonesRoomUpTo; // 0x4D8
	public bool LoreStonesHaro; // 0x4DC
	public bool LoreStonesMoth; // 0x4DD
	public bool ShowCultFaith; // 0x4DE
	public bool ShowCultIllness; // 0x4DF
	public bool ShowCultHunger; // 0x4E0
	public bool ShowLoyaltyBars; // 0x4E1
	public bool SandboxModeEnabled; // 0x4E2
	public bool SpawnPubResources; // 0x4E3
	public bool EnteredHopRoom; // 0x4E4
	public bool EnteredGrapeRoom; // 0x4E5
	public bool EnteredCottonRoom; // 0x4E6
	public bool IntroDoor1; // 0x4E7
	public bool FirstDoctrineStone; // 0x4E8
	public bool InitialDoctrineStone; // 0x4E9
	public bool ShowHaroDoctrineStoneRoom; // 0x4EA
	public bool HaroIntroduceDoctrines; // 0x4EB
	public bool RatExplainDungeon; // 0x4EC
	public bool RatauToGiveCurseNextRun; // 0x4ED
	public int SozoStoryProgress; // 0x4F0
	public bool MidasBankUnlocked; // 0x4F4
	public bool MidasBankIntro; // 0x4F5
	public bool MidasSacrificeIntro; // 0x4F6
	public bool MidasIntro; // 0x4F7
	public bool MidasDevotionIntro; // 0x4F8
	public bool MidasStatue; // 0x4F9
	public float MidasDevotionCost; // 0x4FC
	public int MidasDevotionLastUsed; // 0x500
	public int MidasFollowerStatueCount; // 0x504
	public bool RatauShowShrineShop; // 0x508
	public bool DecorationRoomFirstConvo; // 0x509
	public bool FirstTarot; // 0x50A
	public bool Tutorial_Night; // 0x50B
	public bool Tutorial_ReturnToDungeon; // 0x50C
	public bool FirstTimeInDungeon; // 0x50D
	public bool AllowBuilding; // 0x50E
	public bool CookedFirstFood; // 0x50F
	public bool Dungeon1Story1; // 0x510
	public bool Dungeon1Story2; // 0x511
	public bool FirstFollowerRescue; // 0x512
	public bool FirstDungeon1RescueRoom; // 0x513
	public bool FirstDungeon2RescueRoom; // 0x514
	public bool FirstDungeon3RescueRoom; // 0x515
	public bool FirstDungeon4RescueRoom; // 0x516
	public bool SherpaFirstConvo; // 0x517
	public bool ResourceRoom1Revealed; // 0x518
	public bool EncounteredHealingRoom; // 0x519
	public bool MinimumRandomRoomsEncountered; // 0x51A
	public int MinimumRandomRoomsEncounteredAmount; // 0x51C
	public bool ForneusLore; // 0x520
	public bool SozoBeforeDeath; // 0x521
	public bool SozoDead; // 0x522
	public bool SozoTakenMushroom; // 0x523
	public bool FirstTimeWeaponMarketplace; // 0x524
	public bool FirstTimeSpiderMarketplace; // 0x525
	public bool FirstTimeSeedMarketplace; // 0x526
	public bool ShowFirstDoctrineStone; // 0x527
	public bool RatauGiftMediumCollected; // 0x528
	public bool CompletedLighthouseCrystalQuest; // 0x529
	public bool CameFromDeathCatFight; // 0x52A
	public bool OldFollowerSpoken; // 0x52B
	public bool InjuredFollowerSpoken; // 0x52C
	public bool CanUnlockRelics; // 0x52D
	public bool FoundRelicAtHubShore; // 0x52E
	public bool FoundRelicInFish; // 0x52F
	public bool GivenRelicFishRiddle; // 0x530
	public bool GivenRelicLighthouseRiddle; // 0x531
	public bool ForceMarketplaceCat; // 0x532
	public bool HadInitialMatingTentInteraction; // 0x533
	public int CultLeader1_LastRun; // 0x534
	public int CultLeader1_StoryPosition; // 0x538
	public int CultLeader2_LastRun; // 0x53C
	public int CultLeader2_StoryPosition; // 0x540
	public int CultLeader3_LastRun; // 0x544
	public int CultLeader3_StoryPosition; // 0x548
	public int CultLeader4_LastRun; // 0x54C
	public int CultLeader4_StoryPosition; // 0x550
	public int DeathCatConversationLastRun; // 0x554
	public int DeathCatStory; // 0x558
	public int DeathCatDead; // 0x55C
	public int DeathCatWon; // 0x560
	public bool DeathCatBoss1; // 0x564
	public bool DeathCatBoss2; // 0x565
	public bool DeathCatBoss3; // 0x566
	public bool DeathCatBoss4; // 0x567
	public bool DeathCatRatauKilled; // 0x568
	public bool DungeonKeyRoomCompleted1; // 0x569
	public bool DungeonKeyRoomCompleted2; // 0x56A
	public bool DungeonKeyRoomCompleted3; // 0x56B
	public bool DungeonKeyRoomCompleted4; // 0x56C
	public bool RatOutpostIntro; // 0x56D
	public bool FirstMonsterHeart; // 0x56E
	public bool Rat_Tutorial_Bell; // 0x56F
	public bool Goat_First_Meeting; // 0x570
	public bool Goat_Guardian_Door_Open; // 0x571
	public bool Key_Shrine_1; // 0x572
	public bool Key_Shrine_2; // 0x573
	public bool Key_Shrine_3; // 0x574
	public bool InTutorial; // 0x575
	public bool UnlockBaseTeleporter; // 0x576
	public bool Tutorial_First_Indoctoring; // 0x577
	public bool Tutorial_Second_Enter_Base; // 0x578
	public bool Tutorial_Rooms_Completed; // 0x579
	public bool Tutorial_Enable_Store_Resources; // 0x57A
	public bool Tutorial_Completed; // 0x57B
	public bool Tutorial_Mission_Board; // 0x57C
	public bool Create_Tutorial_Rooms; // 0x57D
	public bool RatauExplainsFollowers; // 0x57E
	public bool RatauExplainsDemo; // 0x57F
	public bool RatauExplainsBiome0; // 0x580
	public bool RatauExplainsBiome1; // 0x581
	public bool RatauExplainsBiome0Boss; // 0x582
	public bool RatauExplainsTeleporter; // 0x583
	public bool SozoIntro; // 0x584
	public bool SozoDecorationQuestActive; // 0x585
	public bool SozoQuestComplete; // 0x586
	public bool CollectedMenticide; // 0x587
	public bool TarotIntro; // 0x588
	public bool HasTarotBuilding; // 0x589
	public bool ForestOfferingRoomCompleted; // 0x58A
	public bool KnucklebonesIntroCompleted; // 0x58B
	public bool KnucklebonesFirstGameRatauStart; // 0x58C
	public bool ForestChallengeRoom1Completed; // 0x58D
	public bool ForestRescueWorshipper; // 0x58E
	public bool GetFirstFollower; // 0x58F
	public bool BeatenFirstMiniBoss; // 0x590
	public bool RatauExplainBuilding; // 0x591
	public bool PromoteFollowerExplained; // 0x592
	public bool HasMadeFirstOffering; // 0x593
	public bool BirdConvo; // 0x594
	public bool UnlockedHubShore; // 0x595
	public bool GivenFollowerGift; // 0x596
	public bool FinalBossSlowWalk; // 0x597
	public int HadNecklaceOnRun; // 0x598
	public bool HasPerformedPleasureRitual; // 0x59C
	public bool ViolentExtremistFirstTime; // 0x59D
	public bool ShownDungeon1FinalLeaderEncounter; // 0x59E
	public bool ShownDungeon2FinalLeaderEncounter; // 0x59F
	public bool ShownDungeon3FinalLeaderEncounter; // 0x5A0
	public bool ShownDungeon4FinalLeaderEncounter; // 0x5A1
	public bool HaroOnbardedHarderDungeon1; // 0x5A2
	public bool HaroOnbardedHarderDungeon2; // 0x5A3
	public bool HaroOnbardedHarderDungeon3; // 0x5A4
	public bool HaroOnbardedHarderDungeon4; // 0x5A5
	public bool HaroOnbardedHarderDungeon1_PostGame; // 0x5A6
	public bool HaroOnbardedHarderDungeon2_PostGame; // 0x5A7
	public bool HaroOnbardedHarderDungeon3_PostGame; // 0x5A8
	public bool HaroOnbardedHarderDungeon4_PostGame; // 0x5A9
	public bool RevealOfferingChest; // 0x5AA
	public bool OnboardedOfferingChest; // 0x5AB
	public bool OnboardedHomeless; // 0x5AC
	public bool OnboardedHomelessAtNight; // 0x5AD
	public bool OnboardedEndlessMode; // 0x5AE
	public bool OnboardedDeadFollower; // 0x5AF
	public bool OnboardedBuildingHouse; // 0x5B0
	public bool OnboardedMakingMoreFood; // 0x5B1
	public bool OnboardedCleaningBase; // 0x5B2
	public bool OnboardedOldFollower; // 0x5B3
	public bool OnboardedSickFollower; // 0x5B4
	public bool OnboardedStarvingFollower; // 0x5B5
	public bool OnboardedDissenter; // 0x5B6
	public bool OnboardedFaithOfFlock; // 0x5B7
	public bool OnboardedRaiseFaith; // 0x5B8
	public bool OnboardedResourceYard; // 0x5B9
	public bool OnboardedCrisisOfFaith; // 0x5BA
	public bool OnboardedHalloween; // 0x5BB
	public bool OnboardedSermon; // 0x5BC
	public bool OnboardedBuildFarm; // 0x5BD
	public bool OnboardedRefinery; // 0x5BE
	public bool OnboardedCultName; // 0x5BF
	public bool OnboardedZombie; // 0x5C0
	public bool OnboardedLoyalty; // 0x5C1
	public bool OnboardedGodTear; // 0x5C2
	public bool OnboardedMysticShop; // 0x5C3
	public bool ForeshadowedMysticShop; // 0x5C4
	public bool OnboardedLayer2; // 0x5C5
	public bool OnboardedRelics; // 0x5C6
	public bool HasMetChefShop; // 0x5C7
	public int CurrentOnboardingFollowerID; // 0x5C8
	public int CurrentOnboardingFollowerType; // 0x5CC
	public string CurrentOnboardingFollowerTerm; // 0x5D0
	public bool HasPerformedRitual; // 0x5D8
	public bool DeathCatBaalAndAymSecret; // 0x5D9
	public bool ShamuraBaalAndAymSecret; // 0x5DA
	public bool CanFindLeaderRelic; // 0x5DB
	public bool OnboardedDisciple; // 0x5DC
	public bool OnboardedPleasure; // 0x5DD
	public bool OnboardedFollowerPleasure; // 0x5DE
	public List<FollowerLocation> SecretItemsGivenToFollower; // 0x5E0
	public bool BeatenWitnessDungeon1; // 0x5E8
	public bool BeatenWitnessDungeon2; // 0x5E9
	public bool BeatenWitnessDungeon3; // 0x5EA
	public bool BeatenWitnessDungeon4; // 0x5EB
	public bool MysticKeeperBeatenLeshy; // 0x5EC
	public bool MysticKeeperBeatenHeket; // 0x5ED
	public bool MysticKeeperBeatenKallamar; // 0x5EE
	public bool MysticKeeperBeatenShamura; // 0x5EF
	public bool MysticKeeperBeatenAll; // 0x5F0
	public bool MysticKeeperFirstPurchase; // 0x5F1
	public bool MysticKeeperOnboardedSin; // 0x5F2
	public bool ChemachOnboardedSin; // 0x5F3
	public bool KlunkoOnboardedTailor1; // 0x5F4
	public bool KlunkoOnboardedTailor2; // 0x5F5
	public bool AssignedFollowersOutfits; // 0x5F6
	public bool BeatenPostGame; // 0x5F7
	public int GivenLoyaltyQuestDay; // 0x5F8
	public int LastDaySincePlayerUpgrade; // 0x5FC
	public int MealsCooked; // 0x600
	public int DrinksBrewed; // 0x604
	public int TalismanPiecesReceivedFromMysticShop; // 0x608
	public bool MysticShopUsed; // 0x60C
	public int CrystalDoctrinesReceivedFromMysticShop; // 0x610
	public InventoryItem.ITEM_TYPE PreviousMysticShopItem; // 0x614
	public bool OnboardedCrystalDoctrine; // 0x618
	public bool Dungeon1_1_Key; // 0x619
	public bool Dungeon1_2_Key; // 0x61A
	public bool Dungeon1_3_Key; // 0x61B
	public bool Dungeon1_4_Key; // 0x61C
	public bool Dungeon2_1_Key; // 0x61D
	public bool Dungeon2_2_Key; // 0x61E
	public bool Dungeon2_3_Key; // 0x61F
	public bool Dungeon2_4_Key; // 0x620
	public bool Dungeon3_1_Key; // 0x621
	public bool Dungeon3_2_Key; // 0x622
	public bool Dungeon3_3_Key; // 0x623
	public bool Dungeon3_4_Key; // 0x624
	public bool HadFirstTempleKey; // 0x625
	public int CurrentKeyPieces; // 0x628
	public bool GivenFreeDungeonFollower; // 0x62C
	public bool GivenFreeDungeonGold; // 0x62D
	public bool FoxMeeting_0; // 0x62E
	public bool GaveFollowerToFox; // 0x62F
	public bool Ritual_0; // 0x630
	public bool Ritual_1; // 0x631
	public bool Lighthouse_FirstConvo; // 0x632
	public bool Lighthouse_LitFirstConvo; // 0x633
	public bool Lighthouse_FireOutAgain; // 0x634
	public bool Lighthouse_QuestGiven; // 0x635
	public bool Lighthouse_QuestComplete; // 0x636
	public int LighthouseFuel; // 0x638
	public bool Lighthouse_Lit; // 0x63C
	public bool ShoreFishFirstConvo; // 0x63D
	public bool ShoreFishFished; // 0x63E
	public bool ShoreTarotShotConvo1; // 0x63F
	public bool ShoreTarotShotConvo2; // 0x640
	public bool ShoreFlowerShopConvo1; // 0x641
	public bool SozoFlowerShopConvo1; // 0x642
	public bool SozoTarotShopConvo1; // 0x643
	public bool RatauFoundSkin; // 0x644
	public bool MidasFoundSkin; // 0x645
	public bool SozoFoundDecoration; // 0x646
	public int MidasTotalGoldStolen; // 0x648
	public int MidasSpecialEncounter; // 0x64C
	public List<FollowerLocation> MidasSpecialEncounteredLocations; // 0x650
	public bool MidasBeaten; // 0x658
	public bool PlimboSpecialEncountered; // 0x659
	public bool KlunkoSpecialEncountered; // 0x65A
	public bool FishermanSpecialEncountered; // 0x65B
	public bool BaalAndAymSpecialEncounterd; // 0x65C
	public bool LighthouseKeeperSpecialEncountered; // 0x65D
	public bool SozoSpecialEncountered; // 0x65E
	public float OpenedDoorTimestamp; // 0x660
	public bool SeedMarketPlacePostGame; // 0x664
	public bool HelobPostGame; // 0x665
	public bool HorseTown_PaidRespectToHorse; // 0x666
	public bool HorseTown_JoinCult; // 0x667
	public bool HorseTown_OpenedChest; // 0x668
	public bool BlackSoulsEnabled; // 0x669
	public bool PlacedRubble; // 0x66A
	public bool DefeatedExecutioner; // 0x66B
	public int WorldMapCurrentSelection; // 0x66C
	public bool HasBaalSkin; // 0x670
	public bool HasReturnedBaal; // 0x671
	public bool HasAymSkin; // 0x672
	public bool HasReturnedAym; // 0x673
	public bool HasReturnedBoth; // 0x674
	public bool QuickStartActive; // 0x675
	public bool RemovedStoryMomentsActive; // 0x676
	public bool SurvivalModeActive; // 0x677
	public bool SurvivalModeFirstSpawn; // 0x678
	public bool SurvivalModeOnboarded; // 0x679
	public bool SurvivalSleepOnboarded; // 0x67A
	public bool SurvivalHungerOnboarded; // 0x67B
	public float SurvivalMode_Hunger; // 0x67C
	public float SurvivalMode_Sleep; // 0x680
	public int RedHeartsTemporarilyRemoved; // 0x684
	public bool ShownKnuckleboneTutorial; // 0x688
	public bool Knucklebones_Opponent_Ratau_Won; // 0x689
	public int ShopKeeperChefState; // 0x68C
	public int ShopKeeperChefEnragedDay; // 0x690
	public bool Knucklebones_Opponent_0; // 0x694
	public bool Knucklebones_Opponent_0_FirstConvoRataus; // 0x695
	public bool Knucklebones_Opponent_0_Won; // 0x696
	public bool Knucklebones_Opponent_1; // 0x697
	public bool Knucklebones_Opponent_1_FirstConvoRataus; // 0x698
	public bool Knucklebones_Opponent_1_Won; // 0x699
	public bool Knucklebones_Opponent_2; // 0x69A
	public bool Knucklebones_Opponent_2_FirstConvoRataus; // 0x69B
	public bool Knucklebones_Opponent_2_Won; // 0x69C
	public bool DungeonLayer1; // 0x69D
	public bool DungeonLayer2; // 0x69E
	public bool DungeonLayer3; // 0x69F
	public bool DungeonLayer4; // 0x6A0
	public bool DungeonLayer5; // 0x6A1
	public bool BeatenDungeon1; // 0x6A2
	public bool BeatenDungeon2; // 0x6A3
	public bool BeatenDungeon3; // 0x6A4
	public bool BeatenDungeon4; // 0x6A5
	public bool BeatenDeathCat; // 0x6A6
	public bool BeatenLeshyLayer2; // 0x6A7
	public bool BeatenHeketLayer2; // 0x6A8
	public bool BeatenKallamarLayer2; // 0x6A9
	public bool BeatenShamuraLayer2; // 0x6AA
	public bool BeatenOneDungeons; // 0x6AB
	public bool BeatenTwoDungeons; // 0x6AC
	public bool BeatenThreeDungeons; // 0x6AD
	public bool BeatenFourDungeons; // 0x6AE
	public int Dungeon1GodTears; // 0x6B0
	public int Dungeon2GodTears; // 0x6B4
	public int Dungeon3GodTears; // 0x6B8
	public int Dungeon4GodTears; // 0x6BC
	public int DungeonRunsSinceBeatingFirstDungeon; // 0x6C0
	public string PreviousMiniBoss; // 0x6C8
	public List<DungeonSandboxManager.ProgressionSnapshot> SandboxProgression; // 0x6D0
	public bool OnboardedBossRush; // 0x6D8
	public bool CompletedSandbox; // 0x6D9
	public bool CanFindTarotCards; // 0x6DA
	public float LuckMultiplier; // 0x6DC
	public bool NextMissionarySuccessful; // 0x6E0
	public float EnemyModifiersChanceMultiplier; // 0x6E4
	public float EnemyHealthMultiplier; // 0x6E8
	public float ProjectileMoveSpeedMultiplier; // 0x6EC
	public float DodgeDistanceMultiplier; // 0x6F0
	public float CurseFeverMultiplier; // 0x6F4
	public bool SpawnPoisonOnAttack; // 0x6F8
	public bool EnemiesInNextRoomHaveModifiers; // 0x6F9
	public Vector2 CurrentRoomCoordinates; // 0x6FC
	public const float SpecialAttackDamageMultiplierBaseConst = 1.25;
	public float SpecialAttackDamageMultiplier; // 0x704
	public bool NextChestGold; // 0x708
	public bool SpecialAttacksDisabled; // 0x709
	public float BossHealthMultiplier; // 0x70C
	public int ResurrectRitualCount; // 0x710
	public bool EncounteredGambleRoom; // 0x714
	public List<int> LeaderFollowersRecruited; // 0x718
	public int SwordLevel; // 0x720
	public int DaggerLevel; // 0x724
	public int AxeLevel; // 0x728
	public int HammerLevel; // 0x72C
	public int GauntletLevel; // 0x730
	public int FireballLevel; // 0x734
	public int EnemyBlastLevel; // 0x738
	public int MegaSlashLevel; // 0x73C
	public int ProjectileAOELevel; // 0x740
	public int TentaclesLevel; // 0x744
	public int VortexLevel; // 0x748
	public float LastFollowerQuestGivenTime; // 0x74C
	public bool DLC_Pre_Purchase; // 0x750
	public bool DLC_Cultist_Pack; // 0x751
	public bool DLC_Heretic_Pack; // 0x752
	public bool DLC_Sinful_Pack; // 0x753
	public bool DLC_Plush_Bonus; // 0x754
	public bool PAX_DLC; // 0x755
	public bool Twitch_Drop_1; // 0x756
	public bool Twitch_Drop_2; // 0x757
	public bool Twitch_Drop_3; // 0x758
	public bool Twitch_Drop_4; // 0x759
	public bool Twitch_Drop_5; // 0x75A
	public bool Twitch_Drop_6; // 0x75B
	public bool Twitch_Drop_7; // 0x75C
	public bool Twitch_Drop_8; // 0x75D
	public bool Twitch_Drop_9; // 0x75E
	public bool Twitch_Drop_10; // 0x75F
	public bool Twitch_Drop_11; // 0x760
	public bool Twitch_Drop_12; // 0x761
	public bool ForceDammedRelic; // 0x762
	public bool ForceBlessedRelic; // 0x763
	public bool FirstRelic; // 0x764
	public bool EndlessModeOnCooldown; // 0x765
	public bool EndlessModeSinOncooldown; // 0x766
	public float TimeSinceLastStolenCoins; // 0x768
	public float TimeSinceLastFollowerFight; // 0x76C
	public int DaySinceLastSpecialPoop; // 0x770
	public bool followerRecruitWaiting; // 0x774
	public int weddingsPerformed; // 0x778
	public bool ForceClothesShop; // 0x77C
	public bool UnlockedTailor; // 0x77D
	public bool RevealedTailor; // 0x77E
	public int itemsCleaned; // 0x780
	public static int itemsCleanedNeeded; // 0x10
	public int outfitsCreated; // 0x784
	public int drinksCreated; // 0x788
	public int eggsCracked; // 0x78C
	public int eggsHatched; // 0x790
	public int EggsProduced; // 0x794
	public int pleasurePointsRedeemed; // 0x798
	public List<int> PreviousSinPointFollowers; // 0x7A0
	public static int MAX_PREV_SIN; // 0x14
	public bool pleasurePointsRedeemedFollowerSpoken; // 0x7A8
	public bool pleasurePointsRedeemedTempleFollowerSpoken; // 0x7A9
	public int damnedConversation; // 0x7AC
	public int damnedFightConversation; // 0x7B0
	public bool ForceGoldenEgg; // 0x7B4
	public bool ForceSpecialPoo; // 0x7B5
	public bool ForceAbomination; // 0x7B6
	public bool DeathCatBeaten; // 0x7B7
	public bool HasEncounteredTarot; // 0x7B8
	public List<InventoryItem.ITEM_TYPE> RecentRecipes; // 0x7C0
	public List<InventoryItem.ITEM_TYPE> RecipesDiscovered; // 0x7C8
	public List<int> LoreUnlocked; // 0x7D0
	public bool LoreStonesOnboarded; // 0x7D8
	public bool LoreOnboarded; // 0x7D9
	private float playerDamageDealt; // 0x7DC
	public int PlayerScaleModifier; // 0x7E0
	public bool ChefShopDoublePrices; // 0x7E4
	public int FollowerShopUses; // 0x7E8
	public int sacrificesCompleted; // 0x7EC
	public List<InventoryItem.ITEM_TYPE> FoundItems; // 0x7F0
	public bool TakenBossDamage; // 0x7F8
	public int PoopMealsCreated; // 0x7FC
	public bool PrayedAtCrownShrine; // 0x800
	public bool ShellsGifted_0; // 0x801
	public bool ShellsGifted_1; // 0x802
	public bool ShellsGifted_2; // 0x803
	public bool ShellsGifted_3; // 0x804
	public bool ShellsGifted_4; // 0x805
	public Dictionary<FollowerClothingType, int> _revealingOutfits; // 0x808
	public int DateLastScreenshot; // 0x810
	public float PlayerDamageDealtThisRun; // 0x814
	public float PlayerDamageReceivedThisRun; // 0x818
	private float playerDamageReceived; // 0x81C
	public bool Options_ScreenShake; // 0x820
	public static Random RandomSeed; // 0x18
	public static bool UseDataManagerSeed; // 0x20
	public bool PlayerIsASpirit; // 0x821
	public bool BridgeFixed; // 0x822
	public bool BuildingTome; // 0x823
	public bool BeenToDungeon; // 0x824
	public int FollowerID; // 0x828
	public int ObjectiveGroupID; // 0x82C
	public List<FollowerInfo> Followers; // 0x830
	public List<FollowerInfo> Followers_Recruit; // 0x838
	public List<FollowerInfo> Followers_Dead; // 0x840
	public List<int> Followers_Dead_IDs; // 0x848
	public List<FollowerInfo> Followers_Possessed; // 0x850
	public List<FollowerInfo> Followers_Dissented; // 0x858
	public int EncounteredPossessedEnemyRun; // 0x860
	public int StructureID; // 0x864
	public List<StructuresData> BaseStructures; // 0x868
	public List<StructuresData> HubStructures; // 0x870
	public List<StructuresData> HubShoreStructures; // 0x878
	public List<StructuresData> Hub1_MainStructures; // 0x880
	public List<StructuresData> Hub1_BerriesStructures; // 0x888
	public List<StructuresData> Hub1_ForestStructures; // 0x890
	public List<StructuresData> Hub1_RatauInsideStructures; // 0x898
	public List<StructuresData> Hub1_RatauOutsideStructures; // 0x8A0
	public List<StructuresData> Hub1_SozoStructures; // 0x8A8
	public List<StructuresData> Hub1_SwampStructures; // 0x8B0
	public List<StructuresData> Dungeon_Logs1Structures; // 0x8B8
	public List<StructuresData> Dungeon_Logs2Structures; // 0x8C0
	public List<StructuresData> Dungeon_Logs3Structures; // 0x8C8
	public List<StructuresData> Dungeon_Food1Structures; // 0x8D0
	public List<StructuresData> Dungeon_Food2Structures; // 0x8D8
	public List<StructuresData> Dungeon_Food3Structures; // 0x8E0
	public List<StructuresData> Dungeon_Stone1Structures; // 0x8E8
	public List<StructuresData> Dungeon_Stone2Structures; // 0x8F0
	public List<StructuresData> Dungeon_Stone3Structures; // 0x8F8
	public List<int> Followers_Imprisoned_IDs; // 0x900
	public List<int> Followers_Elderly_IDs; // 0x908
	public List<int> Followers_OnMissionary_IDs; // 0x910
	public List<int> Followers_Transitioning_IDs; // 0x918
	public List<int> Followers_Demons_IDs; // 0x920
	public List<int> Followers_Demons_Types; // 0x928
	public float MatingCompletedTimestamp; // 0x930
	public List<SeasonalEventType> ActiveSeasonalEvents; // 0x938
	public List<StructureBrain.TYPES> RevealedStructures; // 0x940
	public List<DayObject> DayList; // 0x948
	public DayObject CurrentDay; // 0x950
	public List<string> TrackedObjectiveGroupIDs; // 0x958
	public List<ObjectivesData> Objectives; // 0x960
	public List<ObjectivesData> CompletedObjectives; // 0x968
	public List<ObjectivesData> FailedObjectives; // 0x970
	public List<ObjectivesData> DungeonObjectives; // 0x978
	public List<StoryData> StoryObjectives; // 0x980
	public List<ObjectivesDataFinalized> CompletedObjectivesHistory; // 0x988
	public List<ObjectivesDataFinalized> FailedObjectivesHistory; // 0x990
	public List<DataManager.QuestHistoryData> CompletedQuestsHistorys; // 0x998
	public InventoryItem.ITEM_TYPE SimpleInventoryItem; // 0x9A0
	public List<InventoryItem> items; // 0x9A8
	public int IngredientsCapacityLevel; // 0x9B0
	public static List<int> IngredientsCapacity; // 0x28
	public int FoodCapacityLevel; // 0x9B4
	public static List<int> FoodCapacity; // 0x30
	public int LogCapacityLevel; // 0x9B8
	public static List<int> LogCapacity; // 0x38
	public int StoneCapacityLevel; // 0x9BC
	public static List<int> StoneCapacity; // 0x40
	[XmlIgnore]
	public static Action<string> OnSkinUnlocked; // 0x48
	public List<string> FollowerSkinsUnlocked; // 0x9C0
	[XmlIgnore]
	public List<string> FollowerSkinsBlacklist; // 0x9C8
	[XmlIgnore]
	public List<string> DLCSkins; // 0x9D0
	[XmlIgnore]
	public string[] SpecialEventSkins; // 0x9D8
	public List<StructureEffect> StructureEffects; // 0x9E0
	public List<string> KilledBosses; // 0x9E8
	public static List<InventoryItem.ITEM_TYPE> AllNecklaces; // 0x50
	public static List<InventoryItem.ITEM_TYPE> AllGifts; // 0x58
	public static Action<EquipmentType> OnWeaponUnlocked; // 0x60
	public List<EquipmentType> WeaponPool; // 0x9F0
	public EquipmentType CurrentWeapon; // 0x9F8
	public int CurrentWeaponLevel; // 0x9FC
	public int CurrentRunWeaponLevel; // 0xA00
	public EquipmentType ForcedStartingWeapon; // 0xA04
	public EquipmentType CurrentCurse; // 0xA08
	public int CurrentCurseLevel; // 0xA0C
	public int CurrentRunCurseLevel; // 0xA10
	public EquipmentType ForcedStartingCurse; // 0xA14
	public RelicType CurrentRelic; // 0xA18
	public List<RelicType> SpawnedRelicsThisRun; // 0xA20
	public float RelicChargeAmount; // 0xA28
	public const int WEAPON_LEVEL_DIVIDER = 3;
	public static List<float> WeaponDurabilityChance; // 0x68
	public static List<float> WeaponDurabilityLevels; // 0x70
	public static Action<TarotCards.Card> OnCurseUnlocked; // 0x78
	public List<EquipmentType> CursePool; // 0xA30
	public static List<TarotCards.Card> TarotCardBlacklist; // 0x80
	public static List<TarotCards.Card> AllTrinkets; // 0x88
	public List<TarotCards.TarotCard> PlayerRunTrinkets; // 0xA38
	public List<TarotCards.Card> PlayerFoundTrinkets; // 0xA40
	public List<CrownAbilities> CrownAbilitiesUnlocked; // 0xA48
	public List<RelicType> PlayerFoundRelics; // 0xA50
	public static List<BluePrint.BluePrintType> AllBluePrints; // 0x90
	public List<BluePrint> PlayerBluePrints; // 0xA58
	public List<InventoryItem.ITEM_TYPE> FishCaught; // 0xA60
	public List<MissionManager.Mission> ActiveMissions; // 0xA68
	public List<MissionManager.Mission> AvailableMissions; // 0xA70
	public float NewMissionDayTimestamp; // 0xA78
	public int LastGoldenMissionDay; // 0xA7C
	public bool MissionShrineUnlocked; // 0xA80
	public List<BuyEntry> ItemsForSale; // 0xA88
	public List<ShopLocationTracker> Shops; // 0xA90
	public int LastDayUsedFollowerShop; // 0xA98
	public FollowerInfo FollowerForSale; // 0xAA0
	public MidasDonation midasDonation; // 0xAA8
	public int LastDayUsedBank; // 0xAB0
	public JellyFishInvestment Investment; // 0xAB8
	public List<TraderTracker> Traders; // 0xAC0
	public List<ShrineUsageInfo> ShrineTimerInfo; // 0xAC8
	public static List<int> RedHeartShrineCosts; // 0x98
	public int RedHeartShrineLevel; // 0xAD0
	public int ShrineHeart; // 0xAD4
	public int ShrineCurses; // 0xAD8
	public int ShrineVoodo; // 0xADC
	public int ShrineAstrology; // 0xAE0
	public List<ItemSelector.Category> ItemSelectorCategories; // 0xAE8
	public List<InventoryItem> itemsDungeon; // 0xAF0
	public float DUNGEON_TIME; // 0xAF8
	public float PLAYER_RUN_DAMAGE_LEVEL; // 0xAFC
	public int PLAYER_HEARTS_LEVEL; // 0xB00
	public int PLAYER_DAMAGE_LEVEL; // 0xB04
	public float PLAYER_HEALTH; // 0xB08
	public float PLAYER_TOTAL_HEALTH; // 0xB0C
	public float PLAYER_BLUE_HEARTS; // 0xB10
	public float PLAYER_BLACK_HEARTS; // 0xB14
	public float PLAYER_SPIRIT_HEARTS; // 0xB18
	public float PLAYER_SPIRIT_TOTAL_HEARTS; // 0xB1C
	public float PLAYER_SPECIAL_CHARGE; // 0xB20
	public float PLAYER_SPECIAL_AMMO; // 0xB24
	public float PLAYER_SPECIAL_CHARGE_TARGET; // 0xB28
	public int PLAYER_ARROW_AMMO; // 0xB2C
	public int PLAYER_ARROW_TOTAL_AMMO; // 0xB30
	public int PLAYER_SPIRIT_AMMO; // 0xB34
	public int PLAYER_SPIRIT_TOTAL_AMMO; // 0xB38
	public int PLAYER_REDEAL_TOKEN; // 0xB3C
	public int PLAYER_REDEAL_TOKEN_TOTAL; // 0xB40
	public int PLAYER_HEALTH_MODIFIED; // 0xB44
	public int PLAYER_STARTING_HEALTH_CACHED; // 0xB48
	public int Souls; // 0xB4C
	public int BlackSouls; // 0xB50
	public int BlackSoulTarget; // 0xB54
	public int FollowerTokens; // 0xB58
	public float ChoreXP; // 0xB5C
	public int ChoreXPLevel; // 0xB60
	private static List<float> TargetChoreXP; // 0xA0
	public float DiscipleXP; // 0xB64
	public int DiscipleLevel; // 0xB68
	public int DiscipleAbilityPoints; // 0xB6C
	public static List<float> TargetDiscipleXP; // 0xA8
	public int XP; // 0xB70
	public int Level; // 0xB74
	public const float XPMultiplier = 1.3;
	public const float XPMultiplierLvlII = 1.5;
	public const float XPMultiplierLvlIII = 2.5;
	public const float XPMultiplierLvlIV = 3;
	public static List<int> TargetXP; // 0xB0
	public int AbilityPoints; // 0xB78
	public int WeaponAbilityPoints; // 0xB7C
	public int CurrentChallengeModeXP; // 0xB80
	public int CurrentChallengeModeLevel; // 0xB84
	public static List<int> ChallengeModeTargetXP; // 0xB8
	public float Doctrine_Pleasure_XP; // 0xB88
	public float Doctrine_PlayerUpgrade_XP; // 0xB8C
	public int Doctrine_PlayerUpgrade_Level; // 0xB90
	public float Doctrine_Special_XP; // 0xB94
	public int Doctrine_Special_Level; // 0xB98
	public float Doctrine_WorkWorship_XP; // 0xB9C
	public int Doctrine_WorkWorship_Level; // 0xBA0
	public float Doctrine_Possessions_XP; // 0xBA4
	public int Doctrine_Possessions_Level; // 0xBA8
	public float Doctrine_Food_XP; // 0xBAC
	public int Doctrine_Food_Level; // 0xBB0
	public float Doctrine_Afterlife_XP; // 0xBB4
	public int Doctrine_Afterlife_Level; // 0xBB8
	public float Doctrine_LawAndOrder_XP; // 0xBBC
	public int Doctrine_LawAndOrder_Level; // 0xBC0
	public int Doctrine_Pleasure_Level; // 0xBC4
	public int CompletedDoctrineStones; // 0xBC8
	public int DoctrineCurrentCount; // 0xBCC
	public int DoctrineTargetCount; // 0xBD0
	public int FRUIT_LOW_MEALS_COOKED; // 0xBD4
	public int VEGETABLE_LOW_MEALS_COOKED; // 0xBD8
	public int VEGETABLE_MEDIUM_MEALS_COOKED; // 0xBDC
	public int VEGETABLE_HIGH_MEALS_COOKED; // 0xBE0
	public int FISH_LOW_MEALS_COOKED; // 0xBE4
	public int FISH_MEDIUM_MEALS_COOKED; // 0xBE8
	public int FISH_HIGH_MEALS_COOKED; // 0xBEC
	public int EGG_MEALS_COOKED; // 0xBF0
	public int MEAT_LOW_COOKED; // 0xBF4
	public int MEAT_MEDIUM_COOKED; // 0xBF8
	public int MEAT_HIGH_COOKED; // 0xBFC
	public int MIXED_LOW_COOKED; // 0xC00
	public int MIXED_MEDIUM_COOKED; // 0xC04
	public int MIXED_HIGH_COOKED; // 0xC08
	public int POOP_MEALS_COOKED; // 0xC0C
	public int GRASS_MEALS_COOKED; // 0xC10
	public int FOLLOWER_MEAT_MEALS_COOKED; // 0xC14
	public int DEADLY_MEALS_COOKED; // 0xC18
	public static List<float> PlayerUpgradeTargetXP; // 0xC0
	public static float DoctrineMultiplier; // 0xC8
	public static List<float> DoctrineTargetXP; // 0xD0
	private int currentweapon; // 0xC1C
	[CompilerGenerated]
	private static DataManager.ChangeToolAction OnChangeTool; // 0xD8
	private static DataManager instance; // 0xE0
	public List<DataManager.EnemyData> EnemiesKilled; // 0xC20
	public Alerts Alerts; // 0xC28
	public List<FinalizedNotification> NotificationHistory; // 0xC30
	public static List<StructureBrain.TYPES> CultistDLCStructures; // 0xE8
	public static List<string> CultistDLCSkins; // 0xF0
	public static List<StructureBrain.TYPES> HereticDLCStructures; // 0xF8
	public static List<string> HereticDLCSkins; // 0x100
	public static List<StructureBrain.TYPES> SinfulDLCStructures; // 0x108
	public static List<string> SinfulDLCSkins; // 0x110
	public FollowerClothingType[] Cultist_DLC_Clothing; // 0xC38
	public FollowerClothingType[] Heretic_DLC_Clothing; // 0xC40
	public FollowerClothingType[] Sinful_DLC_Clothing; // 0xC48

	// Properties
	public bool TailorEnabled { get; }
	public bool PleasureEnabled { get; }
	public float PlayerDamageDealt { get; set; }
	public float PlayerDamageReceived { get; set; }
	public List<InventoryItem> Food { get; }
	public static int StartingEquipmentLevel { get; }
	public int PLAYER_STARTING_HEALTH { get; }
	public float GetTargetChoreXP { get; }
	private static float AllUnlockedMultiplier { get; }
	[JsonIgnore]
	public int CurrentChallengeModeTargetXP { get; }
	public int CURRENT_WEAPON { get; set; }
	public static DataManager Instance { get; set; }
